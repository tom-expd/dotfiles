* Emacs Configuration
** Start-up Message

 Disable this

 #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-screen t)
 #+END_SRC

 #+RESULTS:
 : t

** Utility Functions

 Resume to original size

 #+BEGIN_SRC emacs-lisp
(defun yizhe/reset-text-size ()
   (interactive)
   (text-scale-set 0)
)
 #+END_SRC

 #+RESULTS:
 : yizhe/reset-text-size

#+BEGIN_SRC emacs-lisp

  (defun yizhe/append-to-path (path)
    "Add a path both to the $PATH variable and Emacs's path"
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))

#+END_SRC

#+RESULTS:
: yizhe/append-to-path

Check OS type

#+BEGIN_SRC emacs-lisp
(defmacro with-system (type &rest body)
  "Evaluate BODY if `system-type' equals TYPE."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))
#+END_SRC

** Performance

 Allow 20MB of memory (instead of 0.76MB) before calling garbage collection. This
 means GC runs less often, which speeds up some operations.

	#+BEGIN_SRC emacs-lisp
		(setq gc-cons-threshold 20000000)
	#+END_SRC

	#+RESULTS:
	: 20000000

 When you perform a problematic operation, flash the screen instead of ringing the terminal bell.

 #+BEGIN_SRC emacs-lisp
   (setq visible-bell t)
 #+END_SRC

 #+RESULTS:
 : t

** Backups

Store backups and auto-saved files in a fixed location rather in the same directory as the file.

#+BEGIN_SRC emacs-lisp
(let ((backup-dir "~/Documents/backups")
      (auto-saves-dir "~/Documents/auto-saves/"))
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
        auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
        tramp-backup-directory-alist `((".*" . ,backup-dir))
        tramp-auto-save-directory auto-saves-dir))

(setq backup-by-copying t    ; Don't delink hardlinks
      delete-old-versions t  ; Clean up the backups
      version-control t      ; Use version numbers on backups,
      kept-new-versions 5    ; keep some new versions
      kept-old-versions 2)   ; and some old ones, too
#+END_SRC

#+RESULTS:
: 2

** Whitespaces

Clean up whitespace when saving

#+BEGIN_SRC emacs-lisp
  "Call DELETE-TRAILING-WHITESPACE every time a buffer is saved."
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

#+END_SRC

#+RESULTS:
| gofmt-before-save | (lambda nil (if buffer-file-name (progn (let ((dir (file-name-directory buffer-file-name))) (if (and (not (file-exists-p dir)) (y-or-n-p (format Directory %s does not exist. Create it? dir))) (progn (make-directory dir t))))))) | delete-trailing-whitespace |

One space after a period

#+BEGIN_SRC emacs-lisp
  "Don't assume that sentences should have two spaces after
periods. This ain't a typewriter."
#+END_SRC

#+RESULTS:
: Don't assume that sentences should have two spaces after
: periods. This ain't a typewriter.

If you save a file that doesn't end with a newline, automatically append one.
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

#+RESULTS:
: t

** =#!= executable

When saving a file that starts with `#!', make it executable.

#+BEGIN_SRC emacs-lisp
	(add-hook 'after-save-hook
						'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

#+RESULTS:
| executable-make-buffer-file-executable-if-script-p | rmail-after-save-hook |

** Files & Directories

Refresh buffer when file had changed

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

#+RESULTS:
: t

Offer to create parent directory when saving a file to a directory that doesn't exists

#+BEGIN_SRC emacs-lisp
  "When saving a file in a directory that doesn't exist, offer
to (recursively) create the file's parent directories."
  (add-hook 'before-save-hook
            (lambda ()
              (when buffer-file-name
                (let ((dir (file-name-directory buffer-file-name)))
                  (when (and (not (file-exists-p dir))
                             (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                    (make-directory dir t))))))
#+END_SRC

#+RESULTS:
| (lambda nil (when buffer-file-name (let ((dir (file-name-directory buffer-file-name))) (when (and (not (file-exists-p dir)) (y-or-n-p (format Directory %s does not exist. Create it? dir))) (make-directory dir t))))) | gofmt-before-save | (lambda nil (if buffer-file-name (progn (let ((dir (file-name-directory buffer-file-name))) (if (and (not (file-exists-p dir)) (y-or-n-p (format Directory %s does not exist. Create it? dir))) (progn (make-directory dir t))))))) | delete-trailing-whitespace |

Add file sizes in human-readable units (KB, MB, etc) to dired buffers.

#+BEGIN_SRC emacs-lisp
	(setq-default dired-listing-switches "-alh")
#+END_SRC

#+RESULTS:
: -alh

** Editing

Syntax highlighting always on

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

#+RESULTS:
: t

Visual indication of matching pairs of parentheses

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+END_SRC

#+RESULTS:
: 0.0

Set default line length to 80

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

#+RESULTS:
: 80

If I highlighted some text and just started typing onto it, just delete that text

#+BEGIN_SRC emacs-lisp
	"If some text is selected, and you type some text, delete the
	selected text and start inserting your typed text."
	(delete-selection-mode 1)

#+END_SRC

#+RESULTS:
: t

y/n instead of yes/no

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

#+RESULTS:
: y-or-n-p

** Key Bindings

Make <home> and <end> move point to the beginning and end of the line, respectively.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<home>") 'move-beginning-of-line)
  (global-set-key (kbd "<end>") 'move-end-of-line)
#+END_SRC

#+RESULTS:
: move-end-of-line

Zoom! =C-+= and =C--= makes sense

#+BEGIN_SRC emacs-lisp
	(define-key global-map (kbd "C-0") 'yizhe/reset-text-size)
	(define-key global-map (kbd "C-=") 'text-scale-increase)
	(define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC

#+RESULTS:
: text-scale-decrease

Search keys

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

#+RESULTS:
: isearch-backward

If mac, use command key as meta instead of option

#+BEGIN_SRC emacs-lisp
; set command key to be meta instead of option
(with-system darwin
    (setq mac-command-modifier 'meta))
#+END_SRC

#+RESULTS:
: meta

** TODO Spell Checking
** TODO Lots of Cursors (configure this)

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t)
#+END_SRC

#+RESULTS:
: mc/mark-all-like-this

#+BEGIN_SRC emacs-lisp
		(setq-default ispell-program-name "hunspell")
		(use-package ispell
		 :init
		 (setq ispell-dictionary-alist
			'(
				("en_US"
				 "[[:alpha:]]"
				 "[^[:alpha:]]"
				 "[']"
				 t
				 ("-d" "en_US" "-p" "/usr/share/hunspell/en_US")
				 nil
				 iso-8859-1)
				))
		 (setq ispell-dictionary "en_US")
		)
#+END_SRC

#+RESULTS:
** TODO Yesnippet

http://www.totherme.org/configs/gds.html#orgheadline14

** Comapny Mode

Complete everything when type

#+BEGIN_SRC emacs-lisp
	(use-package company
		:ensure t
		:defer 5
		:diminish company-mode
		:config
		(use-package company-yasnippet))

#+END_SRC

#+RESULTS:
: t

* About me

 #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Yizhe Xu"
	 user-mail-address "me@yizhexu.com"
         calendar-latitude 39.7
         calendar-longitude -104.9)
 #+END_SRC

 #+RESULTS:
 : -104.9

* UI
** Maximize Screen

Hide this and that to maximize screen area

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)

;; also this mini scroll bar
(set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

#+RESULTS:

** Window

Change frame name to something more helpful

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

#+RESULTS:
| :eval | (projectile-project-name) |

Use =neotree= to give a nice tree view of project directory

#+BEGIN_SRC emacs-lisp
	(use-package neotree
		:bind ([f8] . neotree-toggle))
#+END_SRC

#+RESULTS:
: neotree-toggle

** Theme

# I've been using material theme for a while. [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#load-up-a-theme][Make theme a bit transparent]]

#+BEGIN_SRC emacs-lisp
	(defun transparency (value)
		"set transparency of the frame window. 0=transparent/ 100=opaque"
		(interactive "nTransparency Value 0-100 opaque:")
		(set-frame-parameter (selected-frame) 'alpha value))

	(defun apply-theme()
		"use the theme and make frame a bit transparent"
		(interactive)
		(load-theme 'material t)
		(transparency 93))

#+END_SRC

#+RESULTS:
: with-system

#+BEGIN_SRC emacs-lisp
	(with-system gnu/linux
			(if (daemonp)
					(add-hook 'after-make-frame-functions
										(lambda (frame)
											(with-selected-frame frame (apply-theme))))
				(apply-theme)))

	(with-system darwin
		(add-hook 'after-make-frame-functions
											(lambda (frame)
												(with-selected-frame frame (apply-theme))))
		(apply-theme))
#+END_SRC

#+RESULTS:

** Font

#+BEGIN_SRC emacs-lisp
(set-default-font "Hack-12")
#+END_SRC

#+RESULTS:

** Fancy Lambdas

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

#+RESULTS:
: t

** Scroll

Less when hit the key so I can find stuff

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

#+RESULTS:
: 100

** Time

Show a clock

#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(display-time-mode 1)
#+END_SRC

#+RESULTS:
: t

** Minibuffer

Sometimes cursor get stuck in minibuffer is annoying

#+BEGIN_SRC emacs-lisp
	(setq minibuffer-prompt-properties
				(quote
				 (read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)))
#+END_SRC

#+RESULTS:
| read-only | t | point-entered | minibuffer-avoid-prompt | face | minibuffer-prompt |

* Programming Languages

Append path of my programs

#+BEGIN_SRC emacs-lisp
(yizhe/append-to-path "/usr/bin")
(yizhe/append-to-path "/usr/local/bin")
#+END_SRC

#+RESULTS:
| /usr/local/bin | /usr/local/anaconda3/bin | /home/yizhe/Go/bin | /usr/bin | /bin | /usr/sbin | /sbin | /usr/local/Cellar/emacs/26.1_1/libexec/emacs/26.1/x86_64-apple-darwin17.7.0 |

Change tab width to 2 characters

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

For camelCase words, move through them as one word

#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

Compilation be more obvious

#+BEGIN_SRC emacs-lisp
(setq compilaton-scroll-output t)
#+END_SRC

** Tramp

Parse =.ssh/config= to figure out users and hosts.

#+BEGIN_SRC
 (tramp-set-completion-function "ssh"
           '((tramp-parse-sconfig "/etc/ssh_config")
             (tramp-parse-sconfig "~/.ssh/config")))
#+END_SRC

 #+RESULTS:
 | ssh     | (tramp-parse-sconfig ~/.ssh/config)   |                                         |                                     |
 | fcp     | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | psftp   | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | pscp    | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | plink   | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | krlogin | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | sg      | (tramp-parse-etc-group /etc/group)    |                                         |                                     |
 | ksu     | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
 | doas    | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
 | sudo    | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
 | su      | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
 | nc      | (tramp-parse-hosts /etc/hosts)        |                                         |                                     |
 | telnet  | (tramp-parse-hosts /etc/hosts)        |                                         |                                     |
 | sshx    | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | remsh   | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | rsh     | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | rsync   | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | scpx    | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | scp     | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | remcp   | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | rcp     | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | adb     | (tramp-adb-parse-device-names )       |                                         |                                     |

#+BEGIN_SRC sh /ssh:sphynx:/
pwd
#+END_SRC

#+RESULTS:
: /Users/p2762265/.emacs.d

 Use =tramp= to start a process on remote machine, requires config as below in =.ssh=

 #+BEGIN_EXAMPLE
	 Host sphynx
				Hostname sphynx.lab.com
				User yxu
				IdentityFile ~/.ssh/my_amazon_key.pem
				ForwardX11 yes
 #+END_EXAMPLE

** Golang

Configure my =$GOPATH= and tell Emacs where my Go binaries are at

#+BEGIN_SRC emacs-lisp
(setenv "GOPATH" "/home/yizhe/Go")
(yizhe/append-to-path (concat (getenv "GOPATH") "/bin"))
#+END_SRC

#+RESULTS:
| /home/yizhe/Go/bin | /usr/local/bin | /usr/local/sbin | /usr/bin | /opt/cuda/bin | /usr/bin/site_perl | /usr/bin/vendor_perl | /usr/bin/core_perl | /usr/lib/emacs/26.1/x86_64-pc-linux-gnu |

Run =goimports= before saving. It formats the code and also updates the imports.
#+BEGIN_SRC emacs-lisp
(setq gofmt-command "goimports")
(add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC

#+RESULTS:
| gofmt-before-save |

When open a Go source code:

- Start up =company-mode= with the Go backend. This requires that the =gocode=
  binary is installed,
- Redefine the default =compile= command to something Go-specific, and
- Enable =flycheck=.

#+BEGIN_SRC emacs-lisp
(add-hook 'go-mode-hook
          (lambda ()
            (set (make-local-variable 'company-backends)
                 '(company-go))
            (company-mode)
            (if (not (string-match "go" compile-command))
                (set (make-local-variable 'compile-command)
                     "go build -v && go test -v && go vet"))
            (flycheck-mode)))

#+END_SRC

#+RESULTS:
| lambda | nil | (set (make-local-variable (quote company-backends)) (quote (company-go))) | (company-mode) | (if (not (string-match go compile-command)) (set (make-local-variable (quote compile-command)) go build -v && go test -v && go vet)) | (flycheck-mode) |

** Lisps

Some configuration for =emacs-lisp=

#+BEGIN_SRC emacs-lisp
(setq lispy-mode-hooks
      '(emacs-lisp-mode-hook
        lisp-mode-hook))

(dolist (hook lispy-mode-hooks)
  (add-hook hook (lambda ()
                   (setq show-paren-style 'expression)
                   (paredit-mode)
                   (rainbow-delimiters-mode))))
#+END_SRC

#+RESULTS:

=eldoc-mode= to display documentation for Emacs

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

#+RESULTS:
| eldoc-mode | (lambda nil (setq show-paren-style (quote expression)) (paredit-mode) (rainbow-delimiters-mode)) | (lambda nil (flyspell-prog-mode)) |

** Magit

Quickly view git status with =C-x g=

Enable spellchecking for commit messages.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)

    :config
    (use-package evil-magit)
    (setq git-commit-summary-max-length 50)
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell))
#+END_SRC

Highlight uncommited changes

#+BEGIN_SRC emacs-lisp
(require 'diff-hl)

(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
(add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

#+RESULTS:
| turn-on-diff-hl-mode |

** Python

Add =/opt/anaconda/bin= to load path.

#+BEGIN_SRC emacs-lisp
(with-system gnu/linux (yizhe/append-to-path "/opt/anaconda/bin"))
(with-system darwin (yizhe/append-to-path "/usr/local/anaconda3/bin"))
#+END_SRC

#+RESULTS:
| /usr/local/anaconda3/bin | /opt/anaconda/bin | /home/yizhe/Go/bin | /usr/bin | /bin | /usr/sbin | /sbin | /usr/local/Cellar/emacs/26.1_1/libexec/emacs/26.1/x86_64-apple-darwin17.7.0 |

Configure my coda environments

#+BEGIN_SRC emacs-lisp
  ; where to look for environments
(with-system gnu/linux (setenv "WORKON_HOME" "/home/yizhe/.conda/envs"))
(with-system darwin (setenv "WORKON_HOME" "/usr/local/anaconda3/envs"))
(pyvenv-mode 1)
#+END_SRC

#+RESULTS:
: t

Use =elpy=, it is nice!

#+BEGIN_SRC emacs-lisp
;; enable elpy
(elpy-enable)
#+END_SRC

Use =ipython= interpreter with elpy

#+BEGIN_SRC emacs-lisp
;; ipython interpreter
  (setq python-shell-interpreter "jupyter"
        python-shell-interpreter-args "console --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'python-shell-completion-native-disabled-interpreters
               "jupyter")
#+END_SRC

#+RESULTS:
| jupyter | pypy | ipython |

#+BEGIN_SRC emacs-lisp
;; syntax check on the fly
(when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))
#+END_SRC

#+RESULTS:
| flycheck-mode |

Format code according to =PEP8= when save:
#+BEGIN_SRC emacs-lisp
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC

#+RESULTS:
| py-autopep8-enable-on-save | flycheck-mode |


=Jedi= for auto-completion

#+BEGIN_SRC emacs-lisp
(add-to-list 'company-backends 'company-jedi)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
#+END_SRC

#+RESULTS:
: t

** Shell

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 2
                  sh-indentation 2)))
#+END_SRC

#+RESULTS:
| (lambda nil (setq sh-basic-offset 2 sh-indentation 2)) | sh-electric-here-document-mode |

** Terminal

=multi-term= bound to =C-c t=

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c t") 'multi-term)
#+END_SRC

#+RESULTS:
: multi-term

Use a login shell

#+BEGIN_SRC emacs-lisp
(setq multi-term-program-switches "--login")
#+END_SRC

#+RESULTS:
: --login

Some hooks to =term-mode=:
- Clickable Urls

#+BEGIN_SRC emacs-lisp
  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)))
#+END_SRC

** Scala

=scala-mode= and =sbt-mode= needs to be installed

#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode))
  (use-package sbt-mode)

#+END_SRC

And mute the start-up message

#+BEGIN_SRC emacs-lisp
(setq ensime-startup-notification nil)
#+END_SRC

** R

*** ESS - Emacs Speaks Statistics

Enable ess

#+BEGIN_SRC emacs-lisp
 (use-package ess
  :ensure t
  :init (require 'ess-site))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC
(setq ess-R-font-lock-keywords
    '((ess-R-fl-keyword:modifiers . t)
     (ess-R-fl-keyword:fun-defs . t)
     (ess-R-fl-keyword:keywords . t)
     (ess-R-fl-keyword:assign-ops)
     (ess-R-fl-keyword:constants . t)
     (ess-fl-keyword:fun-calls . t)
     (ess-fl-keyword:numbers)
     (ess-fl-keyword:operators)
     (ess-fl-keyword:delimiters)
     (ess-fl-keyword:=)
     (ess-R-fl-keyword:F&T)
     (ess-R-fl-keyword:%op%)))

(add-hook 'ess-mode-hook 'turn-on-pretty-mode)
#+END_SRC

#+RESULTS:
| turn-on-pretty-mode | ess-S-mouse-me-menu-commands | ess-r-setup-flymake |

*** =company-mode=

Activate company mode with ESS

#+BEGIN_SRC emacs-lisp
	(setq ess-use-company t
				company-selection-wrap-around t
				company-tooltip-align-annotations t
				company-idle-delay 0.36
				company-show-numbers t
				company-tooltip-flip-when-above t
				company-minimum-prefix-length 2
				company-tooltip-limit 10)

#+END_SRC

#+RESULTS:
: 10

Display quick help

#+BEGIN_SRC emacs-lisp
(define-key company-active-map (kbd "M-h") 'company-show-doc-buffer)
#+END_SRC

#+RESULTS:
: company-show-doc-buffer

Completion keys

#+BEGIN_SRC emacs-lisp
(define-key company-active-map [return] nil)
(define-key company-active-map [tab] 'company-complete-common)
(define-key company-active-map (kbd "TAB") 'company-complete-common)
(define-key company-active-map (kbd "M-TAB") 'company-complete-selection)
#+End_Src

#+RESULTS:
: company-complete-selection

Bind =M-,= as next in auto-complete, =M-k= as previous.

 #+BEGIN_SRC emacs-lisp
 (define-key company-active-map (kbd "M-n") nil)
 (define-key company-active-map (kbd "M-p") nil)
 (define-key company-active-map (kbd "M-,") 'company-select-next)
 (define-key company-active-map (kbd "M-k") 'company-select-previous)
 #+END_SRC

 An example is like:

 #+BEGIN_SRC R
	 library(ggplot2)

	 ggplot(mpg, aes(displ, hwy, Colour = class)) +
			 geom_point() +
			 geom_abline
 #+END_SRC

*** Use R with  =org-mode=

 When use R with =org-mode=, Don't need to double check before evaluate with =C-c C-c=

 #+BEGIN_SRC emacs-lisp
 (setq org-confirm-babel-evaluate nil)
 #+END_SRC

 Enable graphical output

 #+BEGIN_SRC emacs-lisp
 (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
 (add-hook 'org-mode-hook 'org-display-inline-images)
 #+END_SRC

 #+RESULTS:
 | org-display-inline-images | flyspell-mode | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

 Some inline example SRC_R[:exports results]{round(pi, 2)}

 Autocomplete with =tab=

 #+BEGIN_SRC emacs-lisp
 ;; start auto-complete with emacs
 (setq ess-use-company 'script-only)
 #+END_SRC

 #+RESULTS:
 : script-only

 #+RESULTS:
 : company-select-previous

* =org-mode=
** Keyboard shortcuts

	These are the shortcuts I'm trying to use

	#+BEGIN_SRC emacs-lisp
		(global-set-key (kbd "C-c o")
											(lambda () (interactive) (find-file org-index-file))) ;; access to my index-org everywhere

		(bind-key "C-c r" 'org-capture)
		(bind-key "C-c a" 'org-agenda)
		(bind-key "<f9> <f9>" 'org-agenda-list)
		(bind-key "<f9> <f8>" (lambda () (interactive) (org-capture nil "r")))
	#+END_SRC

Quickly visit =configuration.org= file

#+BEGIN_SRC emacs-lisp
(defun visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/configuration.org"))

(global-set-key (kbd "C-c e") 'visit-emacs-config)
#+END_SRC

	#+RESULTS:
	: visit-emacs-config

** Display Preferences

 Pretty bullet, outline, etc

 #+BEGIN_SRC emacs-lisp
 (use-package org-bullets
   :init
   (add-hook 'org-mode-hook #'org-bullets-mode))

 #+END_SRC

 If there's content under a header, show a little downward pointing arrow from [[https://github.com/hrs/dotfiles][hrs's dotfiles]]

 #+BEGIN_SRC emacs-lisp
 (setq org-ellipsis "⤵")
 #+END_SRC

 #+RESULTS:
 : ⤵

 Syntax highlighting enable in source code block

 #+BEGIN_SRC emacs-lisp
 (setq org-src-fontify-natively t)
 #+END_SRC

 #+RESULTS:
 : t

 Make TAB act as if it were issued in a buffer of the language's major mode.

 #+BEGIN_SRC emacs-lisp
   (setq org-src-tab-acts-natively t)
 #+END_SRC

 Enable spell-checking in Org-mode.

 #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook 'flyspell-mode)
 #+END_SRC

 #+RESULTS:
 | flyspell-mode | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Task Management

My org file is stored in =~/Documents/org=, finished tasks will be archived in
=~/Documents/org/archive.org=, and all the tasks stores in
=~/Documents/org/index.org=

| index.org | Main org file. Inbox for org-capture |
| yizhe.org | My knowledge management              |

#+BEGIN_SRC emacs-lisp
	(setq org-directory "~/Documents/org")

	(defun org-file-path (filename)
		"Return the absolute address of an org file, given its relative name."
		(concat (file-name-as-directory org-directory) filename))

	(setq org-index-file (org-file-path "index.org"))
	(setq org-archive-location
				(concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

Agenda should be derived from =index.org=

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list org-index-file))
#+END_SRC

#+RESULTS:
| ~/Documents/org/index.org |

=C-c i= quickly open up todo list

#+BEGIN_SRC emacs-lisp
(defun open-index-file ()
  "Open the master org TODO list."
  (interactive)
  (find-file org-index-file)
  (flycheck-mode -1)
  (end-of-buffer))

(global-set-key (kbd "C-c i") 'open-index-file)
#+END_SRC

#+RESULTS:
: open-index-file

Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+BEGIN_SRC emacs-lisp
(defun mark-done-and-archive ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))

(define-key org-mode-map (kbd "C-c C-x C-s") 'mark-done-and-archive)
#+END_SRC

#+RESULTS:
: mark-done-and-archive

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

*** Capturing Tasks

Probably would need to quickly capture:

- List of todo in =~/Documents/index.org=

#+BEGIN_SRC emacs-lisp
	(setq org-capture-templates
				'(
					("t" "Todo" entry (file+headline org-index-file "Inbox")
					 "* TODO %? %U" :empty-lines 1)

					("s" "Scheduled Todo" entry (file+headline org-index-file "Inbox")
					 "* TODO %? %^G \nSCHEDULED: %^t\n  %U" :empty-lines 1)

	))
#+END_SRC

#+RESULTS:
| t | Todo | entry | (file+headline org-index-file Inbox) | basic-task-template |
** Exporting

Allow =babel= to evaluate Emacs lisp code

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)))
#+END_SRC

Don’t ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

** Source Code

Source code that =org-babel= wants to evaluate

#+BEGIN_SRC emacs-lisp
	(org-babel-do-load-languages
			 'org-babel-load-languages
			 '((emacs-lisp . t)
				 (R . t)
				 (latex . t)
				 (python . t)
				 (shell . t)
				 (latex . t)
				 (gnuplot . t)
				 (sql . t)))
#+END_SRC

#+RESULTS:

When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

#+RESULTS:
: current-window

*** Emacs Lisp

 Quickly insert a block of elisp:

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'org-structure-template-alist
								'("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
 #+END_SRC

*** R

 Quickly insert a block of R:

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'org-structure-template-alist
								'("r" "#+BEGIN_SRC R :session *R*\n?\n#+END_SRC"))
 #+END_SRC

 #+RESULTS:
 | r | #+BEGIN_SRC R :session *R* |
