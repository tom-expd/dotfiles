* Emacs Configuration
** Package Management

#+begin_src emacs-lisp :results none
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/"))
      package-archive-priorities '(("gnu" . 10)
                                   ("melpa" . 20)
                                   ("melpa-stable" . 5)
                                   ("org" . 20))
      package-menu-hide-low-priority nil)
#+end_src

Use package

#+begin_src emacs-lisp
(require 'use-package)

(setq  use-package-compute-statistics t
       use-package-verbose t
       use-package-always-ensure t)
#+end_src

#+RESULTS:
: t

** Start-up

 Disable this start-up message

 #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-screen t)
 #+END_SRC

 #+RESULTS:
 : t

Load path to custom lisp code
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/resources/")
#+END_SRC

#+RESULTS:
| ~/.emacs.d/resources/ | /home/yizhe/.emacs.d/.cask/26.1/elpa/auto-compile-20180321.1507 | /home/yizhe/.emacs.d/.cask/26.1/elpa/color-identifiers-mode-20181120.1951 | /home/yizhe/.emacs.d/.cask/26.1/elpa/company-go-20180427.1856 | /home/yizhe/.emacs.d/.cask/26.1/elpa/company-jedi-20151217.321 | /home/yizhe/.emacs.d/.cask/26.1/elpa/diff-hl-1.8.5 | /home/yizhe/.emacs.d/.cask/26.1/elpa/elpy-20181209.29 | /home/yizhe/.emacs.d/.cask/26.1/elpa/ensime-20180615.1330 | /home/yizhe/.emacs.d/.cask/26.1/elpa/company-20181208.1905 | /home/yizhe/.emacs.d/.cask/26.1/elpa/ess-18.10.2 | /home/yizhe/.emacs.d/.cask/26.1/elpa/evil-magit-20181127.1501 | /home/yizhe/.emacs.d/.cask/26.1/elpa/evil-20181206.1209 | /home/yizhe/.emacs.d/.cask/26.1/elpa/find-file-in-project-20181203.433 | /home/yizhe/.emacs.d/.cask/26.1/elpa/flycheck-31 | /home/yizhe/.emacs.d/.cask/26.1/elpa/go-autocomplete-20170626.1023 | /home/yizhe/.emacs.d/.cask/26.1/elpa/go-eldoc-20170305.1427 | /home/yizhe/.emacs.d/.cask/26.1/elpa/go-mode-20181012.329 | /home/yizhe/.emacs.d/.cask/26.1/elpa/goto-chg-20181208.2300 | /home/yizhe/.emacs.d/.cask/26.1/elpa/guide-key-20150108.635 | /home/yizhe/.emacs.d/.cask/26.1/elpa/highlight-indentation-20181204.839 | /home/yizhe/.emacs.d/.cask/26.1/elpa/htmlize-20180923.1829 | /home/yizhe/.emacs.d/.cask/26.1/elpa/ivy-20181206.1603 | /home/yizhe/.emacs.d/.cask/26.1/elpa/jedi-20160426.456 | /home/yizhe/.emacs.d/.cask/26.1/elpa/auto-complete-20170125.245 | /home/yizhe/.emacs.d/.cask/26.1/elpa/jedi-core-20181207.1 | /home/yizhe/.emacs.d/.cask/26.1/elpa/epc-20140610.534 | /home/yizhe/.emacs.d/.cask/26.1/elpa/ctable-20171006.11 | /home/yizhe/.emacs.d/.cask/26.1/elpa/concurrent-20161229.330 | /home/yizhe/.emacs.d/.cask/26.1/elpa/julia-mode-20180816.2117 | /home/yizhe/.emacs.d/.cask/26.1/elpa/julia-repl-20180923.1124 | /home/yizhe/.emacs.d/.cask/26.1/elpa/magit-2.90.1 | /home/yizhe/.emacs.d/.cask/26.1/elpa/git-commit-20181206.2347 | /home/yizhe/.emacs.d/.cask/26.1/elpa/ghub-20181206.2101 | /home/yizhe/.emacs.d/.cask/26.1/elpa/graphql-20180912.31 | /home/yizhe/.emacs.d/.cask/26.1/elpa/magit-popup-20181204.2031 | /home/yizhe/.emacs.d/.cask/26.1/elpa/minions-0.3.1 | /home/yizhe/.emacs.d/.cask/26.1/elpa/multi-term-20160619.933 | /home/yizhe/.emacs.d/.cask/26.1/elpa/multiple-cursors-20180913.1237 | /home/yizhe/.emacs.d/.cask/26.1/elpa/neotree-20181121.2026 | /home/yizhe/.emacs.d/.cask/26.1/elpa/nord-theme-20180913.1749 | /home/yizhe/.emacs.d/.cask/26.1/elpa/org-bullets-0.2.4 | /home/yizhe/.emacs.d/.cask/26.1/elpa/org-plus-contrib-20190128 | /home/yizhe/.emacs.d/.cask/26.1/elpa/packed-20180318.1729 | /home/yizhe/.emacs.d/.cask/26.1/elpa/paredit-20171127.205 | /home/yizhe/.emacs.d/.cask/26.1/elpa/pkg-info-20150517.1143 | /home/yizhe/.emacs.d/.cask/26.1/elpa/popup-20160709.1429 | /home/yizhe/.emacs.d/.cask/26.1/elpa/popwin-20150315.1300 | /home/yizhe/.emacs.d/.cask/26.1/elpa/py-autopep8-20160925.1052 | /home/yizhe/.emacs.d/.cask/26.1/elpa/python-environment-20150310.853 | /home/yizhe/.emacs.d/.cask/26.1/elpa/deferred-20170901.1330 | /home/yizhe/.emacs.d/.cask/26.1/elpa/pyvenv-20181202.1607 | /home/yizhe/.emacs.d/.cask/26.1/elpa/rainbow-delimiters-20170929.1132 | /home/yizhe/.emacs.d/.cask/26.1/elpa/sbt-mode-20180511.1622 | /home/yizhe/.emacs.d/.cask/26.1/elpa/scala-mode-20170802.1132 | /home/yizhe/.emacs.d/.cask/26.1/elpa/smart-mode-line-2.12.0 | /home/yizhe/.emacs.d/.cask/26.1/elpa/rich-minority-20170813.1322 | /home/yizhe/.emacs.d/.cask/26.1/elpa/smartparens-20190112.1318 | /home/yizhe/.emacs.d/.cask/26.1/elpa/tramp-term-20180223.1527 | /home/yizhe/.emacs.d/.cask/26.1/elpa/treepy-20180724.656 | /home/yizhe/.emacs.d/.cask/26.1/elpa/undo-tree-0.6.5 | /home/yizhe/.emacs.d/.cask/26.1/elpa/use-package-20181119.2350 | /home/yizhe/.emacs.d/.cask/26.1/elpa/bind-key-20180513.430 | /home/yizhe/.emacs.d/.cask/26.1/elpa/with-editor-20181113.1845 | /home/yizhe/.emacs.d/.cask/26.1/elpa/async-20180527.1730 | /home/yizhe/.emacs.d/.cask/26.1/elpa/yasnippet-20181015.1212 | /home/yizhe/.emacs.d/elpa/material-theme-1.2 | /home/yizhe/.emacs.d/elpa/pallet-0.9.2 | /home/yizhe/.emacs.d/elpa/cask-20181107.942 | /home/yizhe/.emacs.d/elpa/ansi-20150703.826 | /home/yizhe/.emacs.d/elpa/package-build-20181126.220 | /home/yizhe/.emacs.d/elpa/epl-20180205.2049 | /home/yizhe/.emacs.d/elpa/f-20180106.922 | /home/yizhe/.emacs.d/elpa/dash-20180910.1856 | /home/yizhe/.emacs.d/elpa/s-20180406.808 | /home/yizhe/.emacs.d/elpa/shut-up-20180628.1830 | /usr/share/emacs/26.1/site-lisp | /usr/share/emacs/site-lisp | /usr/share/emacs/site-lisp/auctex | /usr/share/emacs/site-lisp/auctex/images | /usr/share/emacs/26.1/lisp | /usr/share/emacs/26.1/lisp/vc | /usr/share/emacs/26.1/lisp/url | /usr/share/emacs/26.1/lisp/textmodes | /usr/share/emacs/26.1/lisp/progmodes | /usr/share/emacs/26.1/lisp/play | /usr/share/emacs/26.1/lisp/org | /usr/share/emacs/26.1/lisp/nxml | /usr/share/emacs/26.1/lisp/net | /usr/share/emacs/26.1/lisp/mh-e | /usr/share/emacs/26.1/lisp/mail | /usr/share/emacs/26.1/lisp/leim | /usr/share/emacs/26.1/lisp/language | /usr/share/emacs/26.1/lisp/international | /usr/share/emacs/26.1/lisp/image | /usr/share/emacs/26.1/lisp/gnus | /usr/share/emacs/26.1/lisp/eshell | /usr/share/emacs/26.1/lisp/erc | /usr/share/emacs/26.1/lisp/emulation | /usr/share/emacs/26.1/lisp/emacs-lisp | /usr/share/emacs/26.1/lisp/cedet | /usr/share/emacs/26.1/lisp/calendar | /usr/share/emacs/26.1/lisp/calc | /usr/share/emacs/26.1/lisp/obsolete |

When load =use-package=, always ensure so don't need to type every time

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

#+RESULTS:
: t

** Utility Functions

 Resume to original size

 #+BEGIN_SRC emacs-lisp
(defun yizhe/reset-text-size ()
   (interactive)
   (text-scale-set 0)
)
 #+END_SRC

 #+RESULTS:
 : yizhe/reset-text-size

#+BEGIN_SRC emacs-lisp

  (defun yizhe/append-to-path (path)
    "Add a path both to the $PATH variable and Emacs's path"
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))

#+END_SRC

#+RESULTS:
: yizhe/append-to-path

Check OS type

#+BEGIN_SRC emacs-lisp
(defmacro with-system (type &rest body)
  "Evaluate BODY if `system-type' equals TYPE."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))
#+END_SRC

** Performance

 Allow 20M of memory (instead of 0.76MB) before calling garbage collection. This
 means GC runs less often, which speeds up some operations.

	#+BEGIN_SRC emacs-lisp
		(setq gc-cons-threshold 20000000)
	#+END_SRC

	#+RESULTS:
	: 20000000

 When you perform a problematic operation, flash the screen instead of ringing the terminal bell.

 #+BEGIN_SRC emacs-lisp
   (setq visible-bell t)
 #+END_SRC

 #+RESULTS:
 : t

** Backups

Store backups and auto-saved files in a fixed location rather in the same directory as the file.

#+BEGIN_SRC emacs-lisp
(let ((backup-dir "~/Documents/backups")
      (auto-saves-dir "~/Documents/auto-saves/"))
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
        auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
        tramp-backup-directory-alist `((".*" . ,backup-dir))
        tramp-auto-save-directory auto-saves-dir))

(setq backup-by-copying t    ; Don't delink hardlinks
      delete-old-versions t  ; Clean up the backups
      version-control t      ; Use version numbers on backups,
      kept-new-versions 5    ; keep some new versions
      kept-old-versions 2)   ; and some old ones, too
#+END_SRC

#+RESULTS:
: 2

** Whitespaces

Clean up whitespace when saving

#+BEGIN_SRC emacs-lisp
  "Call DELETE-TRAILING-WHITESPACE every time a buffer is saved."
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

#+END_SRC

#+RESULTS:
| gofmt-before-save | (lambda nil (if buffer-file-name (progn (let ((dir (file-name-directory buffer-file-name))) (if (and (not (file-exists-p dir)) (y-or-n-p (format Directory %s does not exist. Create it? dir))) (progn (make-directory dir t))))))) | delete-trailing-whitespace |

One space after a period

#+BEGIN_SRC emacs-lisp
  "Don't assume that sentences should have two spaces after
periods. This ain't a typewriter."
#+END_SRC

#+RESULTS:
: Don't assume that sentences should have two spaces after
: periods. This ain't a typewriter.

If you save a file that doesn't end with a newline, automatically append one.
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

#+RESULTS:
: t

** =#!= executable

When saving a file that starts with `#!', make it executable.

#+BEGIN_SRC emacs-lisp
	(add-hook 'after-save-hook
						'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

#+RESULTS:
| executable-make-buffer-file-executable-if-script-p | rmail-after-save-hook |

Append path of my programs

#+BEGIN_SRC emacs-lisp
(yizhe/append-to-path "/usr/bin")
(yizhe/append-to-path "/usr/local/bin")
#+END_SRC

#+RESULTS:
| /usr/local/bin | /usr/bin | /bin | /usr/sbin | /sbin | /usr/local/Cellar/emacs/26.1_1/libexec/emacs/26.1/x86_64-apple-darwin17.7.0 |

** Files & Directories

Refresh buffer when file had changed

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

#+RESULTS:
: t

Offer to create parent directory when saving a file to a directory that doesn't exists

#+BEGIN_SRC emacs-lisp
  "When saving a file in a directory that doesn't exist, offer
to (recursively) create the file's parent directories."
  (add-hook 'before-save-hook
            (lambda ()
              (when buffer-file-name
                (let ((dir (file-name-directory buffer-file-name)))
                  (when (and (not (file-exists-p dir))
                             (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                    (make-directory dir t))))))
#+END_SRC

#+RESULTS:
| (lambda nil (when buffer-file-name (let ((dir (file-name-directory buffer-file-name))) (when (and (not (file-exists-p dir)) (y-or-n-p (format Directory %s does not exist. Create it? dir))) (make-directory dir t))))) | gofmt-before-save | (lambda nil (if buffer-file-name (progn (let ((dir (file-name-directory buffer-file-name))) (if (and (not (file-exists-p dir)) (y-or-n-p (format Directory %s does not exist. Create it? dir))) (progn (make-directory dir t))))))) | delete-trailing-whitespace |

Add file sizes in human-readable units (KB, MB, etc) to dired buffers.

#+BEGIN_SRC emacs-lisp
	(setq-default dired-listing-switches "-alh")
#+END_SRC

#+RESULTS:
: -alh

** Editing

Syntax highlighting always on

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

#+RESULTS:
: t

Visual indication of matching pairs of parentheses

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+END_SRC

#+RESULTS:
: 0.0

Set default line length to 80

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

#+RESULTS:
: 80

If I highlighted some text and just started typing onto it, just delete that text

#+BEGIN_SRC emacs-lisp
	"If some text is selected, and you type some text, delete the
	selected text and start inserting your typed text."
	(delete-selection-mode 1)

#+END_SRC

#+RESULTS:
: t

y/n instead of yes/no

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

#+RESULTS:
: y-or-n-p

** Key Bindings

Make <home> and <end> move point to the beginning and end of the line, respectively.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<home>") 'move-beginning-of-line)
  (global-set-key (kbd "<end>") 'move-end-of-line)
#+END_SRC

#+RESULTS:
: move-end-of-line

Zoom! =C-+= and =C--= makes sense

#+BEGIN_SRC emacs-lisp
	(define-key global-map (kbd "C-0") 'yizhe/reset-text-size)
	(define-key global-map (kbd "C-=") 'text-scale-increase)
	(define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC

#+RESULTS:
: text-scale-decrease

Search keys

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

#+RESULTS:
: isearch-backward

If mac, use command key as meta instead of option

#+BEGIN_SRC
; set command key to be meta instead of option
(with-system darwin
    (setq mac-command-modifier 'meta))
#+END_SRC

#+RESULTS:
: meta

** TODO Spell Checking
** TODO Lots of Cursors (configure this)

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t)
#+END_SRC

#+RESULTS:
: mc/mark-all-like-this

Dictionary could be downloaded via: [[http://wordlist.aspell.net/dicts/][SCOWL]]

#+BEGIN_SRC emacs-lisp
		(setq-default ispell-program-name "hunspell")
		(use-package ispell
		 :init
		 (setq ispell-dictionary-alist
			'(
				("en_US"
				 "[[:alpha:]]"
				 "[^[:alpha:]]"
				 "[']"
				 t
				 (with-system darwin
					 ("-d" "en_US" "-p" "/Library/Spelling/en_US"))
				 (with-system gnu/linux
					 ("-d" "en_US" "-p" "/usr/share/hunspell/en_US"))
				 nil
				 iso-8859-1)
				))
		 (setq ispell-dictionary "en_US")
		)
#+END_SRC

#+RESULTS:
* About me

 #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Yizhe Xu"
	 user-mail-address "me@yizhexu.com"
         calendar-latitude 39.7
         calendar-longitude -104.9)
 #+END_SRC

 #+RESULTS:
 : -104.9

* UI
** Maximize Screen

Hide this and that to maximize screen area

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)

;; also this mini scroll bar
(set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

#+RESULTS:

** Window

Change frame name to something more helpful

#+BEGIN_SRC emacs-lisp
;(setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

#+RESULTS:

Use =neotree= to give a nice tree view of project directory

#+BEGIN_SRC emacs-lisp
	(use-package neotree
		:bind ([f8] . neotree-toggle))
#+END_SRC

#+RESULTS:
: neotree-toggle

** Theme

# I've been using material theme for a while. [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#load-up-a-theme][Make theme a bit transparent]]

#+BEGIN_SRC emacs-lisp
	(defun transparency (value)
		"set transparency of the frame window. 0=transparent/ 100=opaque"
		(interactive "nTransparency Value 0-100 opaque:")
		(set-frame-parameter (selected-frame) 'alpha value))

	(defun apply-theme()
		"use the theme and make frame a bit transparent"
		(interactive)
		(load-theme 'material t)
		(transparency 93))

#+END_SRC

 (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))


#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :config
  (load-theme 'nord t)
	(transparency 93)
	(let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23658 18353 789835 12000) :init (23658 18353 789827 337000) :config (23658 18353 789753 800000) :config-secs (0 0 69404 958000) :init-secs (0 0 116604 949000) :use-package-secs (0 0 116650 13000)))

** Font

#+BEGIN_SRC emacs-lisp
(set-default-font "Hack-12")
#+END_SRC

#+RESULTS:

** Fancy Lambdas

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

#+RESULTS:
: t

** Scroll

Less when hit the key so I can find stuff

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

#+RESULTS:
: 100

** Time

Show a clock

#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(display-time-mode 1)
#+END_SRC

#+RESULTS:
: t

** Power

#+BEGIN_SRC emacs-lisp
(with-system darwin
	(display-battery-mode 1))
#+END_SRC

#+RESULTS:
: t

** Minibuffer

Sometimes cursor get stuck in minibuffer is annoying

#+BEGIN_SRC emacs-lisp
	(setq minibuffer-prompt-properties
				(quote
				 (read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)))
#+END_SRC

#+RESULTS:
| read-only | t | point-entered | minibuffer-avoid-prompt | face | minibuffer-prompt |

** Multiple Cursor

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
#+END_SRC

#+RESULTS:
: mc/mark-previous-like-this

* Language
** General

 Change tab width to 2 characters

 #+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
 #+END_SRC

 For camelCase words, move through them as one word

 #+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
 #+END_SRC

 Compilation be more obvious

 #+BEGIN_SRC emacs-lisp
(setq compilaton-scroll-output t)
 #+END_SRC

 Enable =company-mode=

 #+BEGIN_SRC emacs-lisp
	(use-package company
		:defer 5
		:diminish company-mode
		:config)

 #+END_SRC

 #+RESULTS:
** Latex

https://emacs.stackexchange.com/questions/18619/org-mode-any-keyboard-shortcut-for-latex-code

Here's my latex

#+BEGIN_SRC emacs-lisp
(with-system darwin (yizhe/append-to-path "/Library/TeX/texbin/"))
#+END_SRC

#+RESULTS:

Make it a bit bigger

#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+END_SRC

#+RESULTS:

** Tramp

Parse =.ssh/config= to figure out users and hosts.

#+BEGIN_SRC
 (tramp-set-completion-function "ssh"
           '((tramp-parse-sconfig "/etc/ssh_config")
             (tramp-parse-sconfig "~/.ssh/config")))
#+END_SRC

 #+RESULTS:
 | ssh     | (tramp-parse-sconfig ~/.ssh/config)   |                                         |                                     |
 | fcp     | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | psftp   | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | pscp    | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | plink   | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | krlogin | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | sg      | (tramp-parse-etc-group /etc/group)    |                                         |                                     |
 | ksu     | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
 | doas    | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
 | sudo    | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
 | su      | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
 | nc      | (tramp-parse-hosts /etc/hosts)        |                                         |                                     |
 | telnet  | (tramp-parse-hosts /etc/hosts)        |                                         |                                     |
 | sshx    | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | remsh   | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | rsh     | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | rsync   | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | scpx    | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | scp     | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
 | remcp   | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | rcp     | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
 | adb     | (tramp-adb-parse-device-names )       |                                         |                                     |

#+BEGIN_SRC shell /ssh:sphynx:/ :results output
pwd
#+END_SRC

#+RESULTS:
: /Users/p2762265/.emacs.d

 Use =tramp= to start a process on remote machine, requires config as below in =.ssh=

 #+BEGIN_EXAMPLE
	 Host sphynx
				Hostname sphynx.lab.com
				User yxu
				IdentityFile ~/.ssh/my_amazon_key.pem
				ForwardX11 yes
 #+END_EXAMPLE

** Lisp
** Golang

Configure my =$GOPATH= and tell Emacs where my Go binaries are at

#+BEGIN_SRC emacs-lisp
(setenv "GOPATH" "/home/yizhe/Go")
(yizhe/append-to-path (concat (getenv "GOPATH") "/bin"))
#+END_SRC

#+RESULTS:
| /home/yizhe/Go/bin | /usr/local/bin | /usr/local/sbin | /usr/bin | /opt/cuda/bin | /usr/bin/site_perl | /usr/bin/vendor_perl | /usr/bin/core_perl | /usr/lib/emacs/26.1/x86_64-pc-linux-gnu |

Run =goimports= before saving. It formats the code and also updates the imports.
#+BEGIN_SRC emacs-lisp
(setq gofmt-command "goimports")
(add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC

#+RESULTS:
| gofmt-before-save |

When open a Go source code:

- Start up =company-mode= with the Go backend. This requires that the =gocode=
  binary is installed,
- Redefine the default =compile= command to something Go-specific, and
- Enable =flycheck=.

#+BEGIN_SRC emacs-lisp
(add-hook 'go-mode-hook
          (lambda ()
            (set (make-local-variable 'company-backends)
                 '(company-go))
            (company-mode)
            (if (not (string-match "go" compile-command))
                (set (make-local-variable 'compile-command)
                     "go build -v && go test -v && go vet"))
            (flycheck-mode)))

#+END_SRC

#+RESULTS:
| lambda | nil | (set (make-local-variable (quote company-backends)) (quote (company-go))) | (company-mode) | (if (not (string-match go compile-command)) (set (make-local-variable (quote compile-command)) go build -v && go test -v && go vet)) | (flycheck-mode) |

** Lisps

Some configuration for =emacs-lisp=

#+BEGIN_SRC emacs-lisp
(setq lispy-mode-hooks
      '(emacs-lisp-mode-hook
        lisp-mode-hook))

(dolist (hook lispy-mode-hooks)
  (add-hook hook (lambda ()
                   (setq show-paren-style 'expression)
                   (paredit-mode)
                   (rainbow-delimiters-mode))))
#+END_SRC

#+RESULTS:

=eldoc-mode= to display documentation for Emacs

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

#+RESULTS:
| eldoc-mode | (lambda nil (setq show-paren-style (quote expression)) (paredit-mode) (rainbow-delimiters-mode)) | (lambda nil (flyspell-prog-mode)) |

** Magit

Quickly view git status with =C-x g=

Enable spellchecking for commit messages.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :pin melpa-stable
  :commands magit-status magit-blame
  :init
  (setq magit-auto-revert-mode nil)
  (setq magit-last-seen-setup-instructions "1.4.0")
  :bind ("C-x g" . magit-status))
#+END_SRC

#+RESULTS:
: magit-status

Highlight uncommited changes

#+BEGIN_SRC emacs-lisp
(require 'diff-hl)

(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
(add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

#+RESULTS:
| turn-on-diff-hl-mode |

** Python

Add =/opt/anaconda/bin= to load path.

#+BEGIN_SRC emacs-lisp
(with-system gnu/linux (yizhe/append-to-path "/opt/anaconda/bin"))
(with-system darwin (yizhe/append-to-path "/usr/local/anaconda3/bin"))
#+END_SRC

#+RESULTS:
| /usr/local/anaconda3/bin | /opt/anaconda/bin | /home/yizhe/Go/bin | /usr/bin | /bin | /usr/sbin | /sbin | /usr/local/Cellar/emacs/26.1_1/libexec/emacs/26.1/x86_64-apple-darwin17.7.0 |

Configure my coda environments

#+BEGIN_SRC emacs-lisp
  ; where to look for environments
(with-system gnu/linux (setenv "WORKON_HOME" "/home/yizhe/.conda/envs"))
(with-system darwin (setenv "WORKON_HOME" "/usr/local/anaconda3/envs"))
(pyvenv-mode 1)
#+END_SRC

#+RESULTS:
: t

Use =elpy=, it is nice!

#+BEGIN_SRC emacs-lisp
	;; enable elpy
	(use-package python
		:ensure t
		:defer t
		:mode ("\\.py\\'" . python-mode)

		:interpreter ("python" . python-mode)

		:init
		(setq-default indent-tabs-mode nil)

		:config
		(elpy-enable)
		(setq python-indent-offset 4)
		(add-hook 'python-mode-hook 'smartparens-mode)
		(add-hook 'python-mode-hook 'color-identifiers-mode))
#+END_SRC

#+RESULTS:
: ((python . python-mode) (r . R-mode) (Rscript . R-mode) (ruby1.8 . ruby-mode) (ruby1.9 . ruby-mode) (jruby . ruby-mode) (rbx . ruby-mode) (ruby . ruby-mode) (python[0-9.]* . python-mode) (rhino . js-mode) (gjs . js-mode) (nodejs . js-mode) (node . js-mode) (gawk . awk-mode) (nawk . awk-mode) (mawk . awk-mode) (awk . awk-mode) (pike . pike-mode) (\(mini\)?perl5? . perl-mode) (wishx? . tcl-mode) (tcl\(sh\)? . tcl-mode) (expect . tcl-mode) (octave . octave-mode) (scm . scheme-mode) ([acjkwz]sh . sh-mode) (r?bash2? . sh-mode) (dash . sh-mode) (mksh . sh-mode) (\(dt\|pd\|w\)ksh . sh-mode) (es . sh-mode) (i?tcsh . sh-mode) (oash . sh-mode) (rc . sh-mode) (rpm . sh-mode) (sh5? . sh-mode) (tail . text-mode) (more . text-mode) (less . text-mode) (pg . text-mode) (make . makefile-gmake-mode) (guile . scheme-mode) (clisp . lisp-mode) (emacs . emacs-lisp-mode))

Python indents

#+BEGIN_SRC emacs-lisp
(setq python-indent-guess-indent-offset t)
(setq python-indent-guess-indent-offset-verbose nil)
#+END_SRC

Have been getting this: Warning (python): Your ‘python-shell-interpreter’
doesn’t seem to support readline, yet ‘python-shell-completion-native’ was t and
"ipython" is not part of the
‘python-shell-completion-native-disabled-interpreters’ list. Native completions
have been disabled locally.

#+BEGIN_SRC emacs-lisp
(setq python-shell-completion-native-enable nil)
#+END_SRC

Use =ipython= interpreter with elpy

#+BEGIN_SRC emacs-lisp
;; ipython interpreter
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

#+RESULTS:
: -i --simple-prompt

Format code according to =PEP8= when save:
#+BEGIN_SRC emacs-lisp
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC

#+RESULTS:
| py-autopep8-enable-on-save | flycheck-mode |

=elpy= fix indentation

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :commands elpy-enable
  :init (with-eval-after-load 'python (elpy-enable))

  :config
  (electric-indent-local-mode -1)
  (delete 'elpy-module-highlight-indentation elpy-modules)
  (delete 'elpy-module-flymake elpy-modules)

  (defun ha/elpy-goto-definition ()
    (interactive)
    (condition-case err
        (elpy-goto-definition)
      ('error (xref-find-definitions (symbol-name (symbol-at-point))))))

  :bind (:map elpy-mode-map ([remap elpy-goto-definition] .
                             ha/elpy-goto-definition)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(add-hook 'elpy-mode-hook
	    (lambda ()
		    (setq-default indent-tabs-mode t)
		    (setq-default tab-width 2)
		    (setq-default py-indent-tabs-mode t)
	    (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
#+END_SRC

#+RESULTS:
| (lambda nil (setq-default indent-tabs-mode t) (setq-default tab-width 2) (setq-default py-indent-tabs-mode t) (add-to-list (quote write-file-functions) (quote delete-trailing-whitespace))) | (lambda nil (setq-default indent-tabs-mode t) (setq-default tab-width 4) (setq-default py-indent-tabs-mode t) (add-to-list (quote write-file-functions) (quote delete-trailing-whitespace))) | py-autopep8-enable-on-save | flycheck-mode |

=Jedi= for auto-completion

#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :config
  (use-package company-jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi)))
    (setq company-jedi-python-bin "python")))
#+END_SRC

#+RESULTS:
: t

** Shell

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 2
                  sh-indentation 2)))
#+END_SRC

#+RESULTS:
| (lambda nil (setq sh-basic-offset 2 sh-indentation 2)) | sh-electric-here-document-mode |

** Terminal

=multi-term= bound to =C-c t=

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c t") 'multi-term)
#+END_SRC

#+RESULTS:
: multi-term

Use a login shell

#+BEGIN_SRC emacs-lisp
(setq multi-term-program-switches "--login")
#+END_SRC

#+RESULTS:
: --login

Some hooks to =term-mode=:
- Clickable Urls

#+BEGIN_SRC emacs-lisp
  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)))
#+END_SRC

** Scala

=scala-mode= and =sbt-mode= needs to be installed

#+BEGIN_SRC emacs-lisp
  (use-package sbt-mode
    :pin melpa
    :commands sbt-start sbt-command)

  (use-package scala-mode
    :pin melpa
    :interpreter ("scala" . scala-mode))
#+END_SRC

#+RESULTS:
: ((scala . scala-mode) (r . ess-r-mode) (Rscript . ess-r-mode) (ruby1.8 . ruby-mode) (ruby1.9 . ruby-mode) (jruby . ruby-mode) (rbx . ruby-mode) (ruby . ruby-mode) (python[0-9.]* . python-mode) (rhino . js-mode) (gjs . js-mode) (nodejs . js-mode) (node . js-mode) (gawk . awk-mode) (nawk . awk-mode) (mawk . awk-mode) (awk . awk-mode) (pike . pike-mode) (\(mini\)?perl5? . perl-mode) (wishx? . tcl-mode) (tcl\(sh\)? . tcl-mode) (expect . tcl-mode) (octave . octave-mode) (scm . scheme-mode) ([acjkwz]sh . sh-mode) (r?bash2? . sh-mode) (dash . sh-mode) (mksh . sh-mode) (\(dt\|pd\|w\)ksh . sh-mode) (es . sh-mode) (i?tcsh . sh-mode) (oash . sh-mode) (rc . sh-mode) (rpm . sh-mode) (sh5? . sh-mode) (tail . text-mode) (more . text-mode) (less . text-mode) (pg . text-mode) (make . makefile-gmake-mode) (guile . scheme-mode) (clisp . lisp-mode) (emacs . emacs-lisp-mode))

And mute the start-up message

#+BEGIN_SRC emacs-lisp
(use-package ensime
  :init
  (put 'ensime-auto-generate-config 'safe-local-variable #'booleanp)
  (setq
    ensime-startup-snapshot-notification nil
    ensime-startup-notification nil))

#+END_SRC

#+RESULTS:

*** SBT
#+BEGIN_SRC emacs-lisp
;(sbt-command "gen-ensime")
#+End_Src

Need to tell Sbt to use ensime plugin

 #+BEGIN_SRC scala :tangle (prog1 ".sbt/1.0/plugins/plugins.sbt" (make-directory ".sbt/1.0/plugins" "."))
addSbtPlugin("org.ensime" % "sbt-ensime" % "2.5.1")
 #+END_SRC

Also add some sbt global

#+BEGIN_SRC scala :tangle  (prog1 ".sbt/1.0/globals.sbt" (make-directory ".sbt/1.0" "."))
import org.ensime.EnsimeKeys._
import org.ensime.EnsimeCoursierKeys._

libraryDependencies += "org.scalatest" % "scalatest_2.12" % "3.0.5" % "test"

// if this isn't set then ensime will create 2.11 and 2.12 specific
// directories for you in your tree :(
ensimeIgnoreMissingDirectories in ThisBuild := true

// allow C-c to interrupt the running app NOT kill sbt
cancelable in Global := true
#+END_SRC

#+RESULTS:
#+begin_example
/var/folders/zl/vyy040cj78g3gbtzgml6m_15yggvr0/T/scala-evalh2AdN6:28: [31merror: [0mobject ensime is not a member of package org
import org.ensime.EnsimeKeys._
           ^
/var/folders/zl/vyy040cj78g3gbtzgml6m_15yggvr0/T/scala-evalh2AdN6:28: [31merror: [0mobject ensime is not a member of package org
import org.ensime.EnsimeCoursierKeys._
           ^
/var/folders/zl/vyy040cj78g3gbtzgml6m_15yggvr0/T/scala-evalh2AdN6:29: [31merror: [0mnot found: value ensimeIgnoreMissingDirectories
ensimeIgnoreMissingDirectories in ThisBuild := true
^
/var/folders/zl/vyy040cj78g3gbtzgml6m_15yggvr0/T/scala-evalh2AdN6:29: [31merror: [0mnot found: value ThisBuild
ensimeIgnoreMissingDirectories in ThisBuild := true
                                  ^
/var/folders/zl/vyy040cj78g3gbtzgml6m_15yggvr0/T/scala-evalh2AdN6:29: [31merror: [0mnot found: value cancelable
cancelable in Global := true
^
/var/folders/zl/vyy040cj78g3gbtzgml6m_15yggvr0/T/scala-evalh2AdN6:29: [31merror: [0mnot found: value Global
cancelable in Global := true
              ^

ob_scala_eol[35m
scala> [0m[35m
scala> [0m
#+end_example

** R

Enable ess

#+BEGIN_SRC emacs-lisp
 (use-package ess
  :ensure t
  :init (require 'ess-site))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC
(setq ess-R-font-lock-keywords
    '((ess-R-fl-keyword:modifiers . t)
     (ess-R-fl-keyword:fun-defs . t)
     (ess-R-fl-keyword:keywords . t)
     (ess-R-fl-keyword:assign-ops)
     (ess-R-fl-keyword:constants . t)
     (ess-fl-keyword:fun-calls . t)
     (ess-fl-keyword:numbers)
     (ess-fl-keyword:operators)
     (ess-fl-keyword:delimiters)
     (ess-fl-keyword:=)
     (ess-R-fl-keyword:F&T)
     (ess-R-fl-keyword:%op%)))

(add-hook 'ess-mode-hook 'turn-on-pretty-mode)
#+END_SRC

#+RESULTS:
| turn-on-pretty-mode | ess-S-mouse-me-menu-commands | ess-r-setup-flymake |


Activate company mode with ESS

#+BEGIN_SRC emacs-lisp
	(setq ess-use-company t
				company-selection-wrap-around t
				company-tooltip-align-annotations t
				company-idle-delay 0.36
				company-show-numbers t
				company-tooltip-flip-when-above t
				company-minimum-prefix-length 2
				company-tooltip-limit 10)

#+END_SRC

#+RESULTS:
: 10

Display quick help

#+BEGIN_SRC emacs-lisp
(define-key company-active-map (kbd "M-h") 'company-show-doc-buffer)
#+END_SRC

#+RESULTS:
: company-show-doc-buffer

Completion keys

#+BEGIN_SRC emacs-lisp
(define-key company-active-map [return] nil)
(define-key company-active-map [tab] 'company-complete-common)
(define-key company-active-map (kbd "TAB") 'company-complete-common)
(define-key company-active-map (kbd "M-TAB") 'company-complete-selection)
#+End_Src

#+RESULTS:
: company-complete-selection

Bind =M-,= as next in auto-complete, =M-k= as previous.

 #+BEGIN_SRC emacs-lisp
 (define-key company-active-map (kbd "M-n") nil)
 (define-key company-active-map (kbd "M-p") nil)
 (define-key company-active-map (kbd "M-,") 'company-select-next)
 (define-key company-active-map (kbd "M-k") 'company-select-previous)
 #+END_SRC

 An example is like:

 #+BEGIN_SRC R
	 library(ggplot2)

	 ggplot(mpg, aes(displ, hwy, Colour = class)) +
			 geom_point() +
			 geom_abline
 #+END_SRC

 When use R with =org-mode=, Don't need to double check before evaluate with =C-c C-c=

 #+BEGIN_SRC emacs-lisp
 (setq org-confirm-babel-evaluate nil)
 #+END_SRC

 Enable graphical output

 #+BEGIN_SRC emacs-lisp
 (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
 (add-hook 'org-mode-hook 'org-display-inline-images)
 #+END_SRC

 #+RESULTS:
 | org-display-inline-images | flyspell-mode | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

 Some inline example SRC_R[:exports results]{round(pi, 2)}

** Julia

Julia setup on my Arch Linux machine

#+BEGIN_SRC bash
yay -S julia
#+END_SRC

On mac, my julia is installed at weird place

#+BEGIN_SRC emacs-lisp
(with-system darwin (yizhe/append-to-path "/Applications/Julia-1.0.app/Contents/Resources/julia/bin"))
#+END_SRC

#+RESULTS:
| /Applications/Julia-1.0.app/Contents/Resources/julia/bin | /usr/local/bin | /usr/bin | /bin | /usr/sbin | /sbin | /usr/local/Cellar/emacs/26.1_1/libexec/emacs/26.1/x86_64-apple-darwin17.7.0 |

Julia repl

#+BEGIN_SRC emacs-lisp
(use-package julia-repl)
#+END_SRC

#+RESULTS:

=org-babel= functions for julia code evaluation

#+BEGIN_SRC shell
curl -o ~/.emacs.d/resources/ob-julia.el https://code.orgmode.org/bzg/org-mode/raw/master/contrib/lisp/ob-julia.el
#+END_SRC

Load =ob-julia= from file

#+BEGIN_SRC emacs-lisp
  (use-package ob-julia
    :load-path "~/.emacs.d/resources/ob-julia.el")
#+END_SRC

#+RESULTS:
: t
** SQL

#+begin_src emacs-lisp
;; I want .hql and .q files to use sql-mode
(add-to-list 'auto-mode-alist '("\\.hql\\'" . sql-mode))
(add-to-list 'auto-mode-alist '("\\.q\\'" . sql-mode))
(autoload 'sql-mode "sql-mode" "SQL editing mode." t)
(setq sql-mode-hook 'my-sql-customisations)
(defun my-sql-customisations ()
  "sql-mode customisations that must be done after sql-mode loads"
  (add-to-list 'same-window-buffer-names "*SQL*")
(setq tab-width 2))
#+end_src

#+RESULTS:
: my-sql-customisations

* =org-mode=

Heavily influenced by [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][this]]

** General Set-up
*** Utility Functions

In China, [[http://www.astronomytrek.com/star-facts-megrez/][Megrez]], along with 6 other stars, forms part of an asterism known as
Bei Dou. It is a Taoist deity known as the God of Culture and Literature. This
is my directory name for all my org files.

#+BEGIN_SRC emacs-lisp
	(setq org-directory "~/Documents/megrez/")

	(defun org-file-path (filename)
		"Return the absolute address of an org file, given its relative name."
		(concat (file-name-as-directory org-directory) filename))
#+END_SRC

#+RESULTS:
: org-file-path

*** Org Files

I use =index.org= to collect everything. =projects.org= to manage projects and
related tasks. =later.org= to record stuff I might do some other time, like when
I'm really free. =tickler.org= has all the stuff that's time sensitive.

#+begin_src emacs-lisp
(setq org-index-file (org-file-path "todo.org"))
#+end_src

#+RESULTS:
: ~/Documents/megrez/index.org

Archive file record completed tasks =C-c C-x C-a=

#+begin_src emacs-lisp
(setq org-archive-location
			(concat (org-file-path "archive.org") "::* From %s"))
#+end_src

#+RESULTS:
: ~/Documents/megrez/archive.org::* From %s

*** Capture Templates

Capture todos to inbox.

#+begin_src emacs-lisp
(setq org-capture-templates '(("t" "Todo [inbox]" entry
                               (file+headline	org-index-file "Tasks")
                               "* TODO %i%?")))
#+end_src

#+RESULTS:
| t | Todo [inbox] | entry | (file+headline org-index-file Tasks) | * TODO %i%? |

*** Refile Templates

#+begin_src emacs-lisp
(setq org-refile-targets '(("~/Documents/megrez/todo.org" :maxlevel . 3)))
#+end_src

#+RESULTS:
: ((~/Documents/megrez/index.org :maxlevel . 3))

*** Agenda Categorization
Set agenda files
#+begin_src emacs-lisp
(setq org-agenda-files '("~/Documents/megrez/todo.org"))
#+end_src

#+RESULTS:
| ~/Documents/megrez/todo.org |

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("s" "Studying" tags-todo "@study"
         ((org-agenda-overriding-header "Study")))
				("w" "At work" tags-todo "@work"
         ((org-agenda-overriding-header "Work")))))
#+end_src

#+RESULTS:
| s | Studying | tags-todo | @study | ((org-agenda-overriding-header Study)) |
| w | At work  | tags-todo | @work  | ((org-agenda-overriding-header Work))  |

** Keyboard shortcuts

	These are the shortcuts I'm trying to use

- Refile shortcut =C-c C-w=
- To set a tag =C-c C-c=
- To schedule =C-c C-s= and enter date or time; =C-c C-d= to add deadline.
- To set to do key word =C-c C-t=


	#+BEGIN_SRC emacs-lisp
		(global-set-key (kbd "C-c o")
											(lambda () (interactive) (find-file org-index-file))) ;; access to my index-org everywhere

		(bind-key "C-c r" 'org-capture)
		(bind-key "C-c a" 'org-agenda)
		(bind-key "<f9> <f9>" 'org-agenda-list)
		(bind-key "<f9> <f8>" (lambda () (interactive) (org-capture nil "r")))
	#+END_SRC

	#+RESULTS:
  | lambda | nil | (interactive) | (org-capture nil r) |

Quickly visit =configuration.org= file

#+BEGIN_SRC emacs-lisp
(defun visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/configuration.org"))

(global-set-key (kbd "C-c e") 'visit-emacs-config)
#+END_SRC

	#+RESULTS:
	: visit-emacs-config

** Display Preferences

 Pretty bullet, outline, etc

 #+BEGIN_SRC emacs-lisp
 (use-package org-bullets
   :init
   (add-hook 'org-mode-hook #'org-bullets-mode))
 #+END_SRC

 #+RESULTS:

 If there's content under a header, show a little downward pointing arrow from [[https://github.com/hrs/dotfiles][hrs's dotfiles]]

 #+BEGIN_SRC emacs-lisp
 (setq org-ellipsis "⤵")
 #+END_SRC

 #+RESULTS:

 Syntax highlighting enable in source code block

 #+BEGIN_SRC emacs-lisp
 (setq org-src-fontify-natively t)
 #+END_SRC

 #+RESULTS:
 : t

 Make TAB act as if it were issued in a buffer of the language's major mode.

 #+BEGIN_SRC emacs-lisp
   (setq org-src-tab-acts-natively t)
 #+END_SRC

Redisplay inline image from [[https://emacs.stackexchange.com/questions/30520/org-mode-c-c-c-c-to-display-inline-image][here]]

#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+END_SRC

Just show the markup result *bold*, /italic/, -underlined-, =verbatic=

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

#+RESULTS:
: t

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

#+RESULTS:
| visual-line-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-ref-org-menu | toc-org-mode | org-bullets-mode | org-display-inline-images | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

** Table of Content

#+begin_src emacs-lisp
(use-package toc-org
    :ensure t
    :init
    (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src

#+RESULTS:


#+RESULTS:
: open-index-file

Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+BEGIN_SRC emacs-lisp
(defun mark-done-and-archive ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))

(define-key org-mode-map (kbd "C-c C-x C-s") 'mark-done-and-archive)
#+END_SRC

#+RESULTS:
: mark-done-and-archive

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

=C-c i= quickly open up todo list

#+BEGIN_SRC emacs-lisp
(defun open-index-file ()
  "Open the master org TODO list."
  (interactive)
  (find-file org-index-file)
  (flycheck-mode -1)
  (end-of-buffer))

(global-set-key (kbd "C-c i") 'open-index-file)
#+END_SRC

** Reference

#+begin_src emacs-lisp
(use-package org-ref
  :ensure t)
#+end_src

#+RESULTS:

** Exporting

Allow =babel= to evaluate Emacs lisp code

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)))
#+END_SRC

Don’t ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

** Source Code

Source code that =org-babel= wants to evaluate

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (R . t)
     (julia . t)
     (scala . t)
     (python . t)
     (shell . t)
     (latex . t)
     (gnuplot . t)
     (sql . t)))
#+END_SRC

#+RESULTS:

And syntax

#+BEGIN_SRC emacs-lisp
	(setq org-src-fontify-natively t
				org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

Shortcuts for templates

 #+BEGIN_SRC emacs-lisp
;   (add-to-list 'org-structure-template-alist)
 #+END_SRC

 #+RESULTS:

** Drill

#+BEGIN_SRC emacs-lisp
(require 'cl)
#+END_SRC

#+RESULTS:
: cl

#+BEGIN_SRC emacs-lisp
(use-package org-learn
    :load-path "~/.emacs.d/resources/org-learn.el")

 (use-package org-drill
    :load-path "~/.emacs.d/resources/org-drill.el")
#+END_SRC

#+RESULTS:
