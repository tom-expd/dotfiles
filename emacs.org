* About this file

This is my personal Emacs configuration. I use [[https://github.com/cask/cask][Cask]] and [[https://github.com/rdallasgray/pallet][Pallet]] to manage my
packages. There are some prerequisites to set up the two. 

#+BEGIN_SRC sh
# Set up cask
pushd ~
git clone git@github.com:cask/cask.git
mv cask .cask
echo "export PATH=\"$HOME/.cask/bin:$PATH\"" > .bashrc
popd
#+END_SRC

* Shortcuts

=M-$=: Spell check the document

* Starting Up

** My =init.el=
 This my how my =init.el= looks like

 #+BEGIN_SRC
 ;; initialize package.el packages
 (package-initialize)

 ;; load literal config
 (require 'org)
 (org-babel-load-file
  (expand-file-name "emacs.org"
		    user-emacs-directory))


 (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(initial-frame-alist (quote ((fullscreen . fullheight))))
  '(package-selected-packages (quote (multiple-cursors elpy minions pallet))))
 (custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  )

 #+END_SRC

*** About me

 #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Yizhe Xu"
	 user-mail-address "me@yizhexu.com")
 #+END_SRC

** Initialize Emacs

*** Package Sources
#+BEGIN_SRC emacs-lisp
  ;; initalize all ELPA packages
  (require 'package)
  (package-initialize)

  (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

*** Packages

  #+BEGIN_SRC emacs-lisp

  (require 'cask "~/.cask/cask.el")
  (cask-initialize)

  (require 'pallet)
  (pallet-mode t)

  #+END_SRC

*** Use Package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC
*** Theme
  #+BEGIN_SRC emacs-lisp
    ;; clean up the mode line
    (setq minions-mode-line-lighter "â˜°")
    (minions-mode 1)

    ;; maximize the text window?
    (menu-bar-mode -1)
    (tool-bar-mode -1)


    ;; set theme
    (load-theme 'material t)

    ;; set font
    (set-default-font "Hack-12")

    ;; max height at start
    (custom-set-variables
     '(initial-frame-alist (quote ((fullscreen . fullscreen)))))

    ;; syntax highlighting
    (global-font-lock-mode t)


  #+END_SRC

*** Font

 Hack is a nice font: [[https://github.com/source-foundry/Hack][A typeface designed for source code]]

  #+BEGIN_SRC emacs-lisp
    ;; set font
    (set-default-font "Hack-12")
  #+END_SRC

*** Always Debug

Always enable debug, because everytime anything went wrong you'd want to see this

   #+BEGIN_SRC emacs-lisp
   (setq debug-on-error t)
   (setq debug-on-quit t)
   #+END_SRC

** General Configuration

  Also, load some packages & enable =cl= at start

  #+BEGIN_SRC emacs-lisp

  ;; Keep track of loading time

  (require 'cl)

  #+END_SRC

*** Backups

 File backups move to it's seperate location

 #+BEGIN_SRC emacs-lisp
   ;; backups go to where backups all go
    (setq backup-directory-alist
	  '(("." . "~/.emacs_backups")))

    ;; delete old backups
    (setq delete-old-versions t)

    ;; version control on auto save?
    (setq version-control t)

 #+END_SRC

*** UTF-8

 #+BEGIN_SRC emacs-lisp

 (prefer-coding-system 'utf-8)
 (set-default-coding-systems 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-keyboard-coding-system 'utf-8)
 (setq default-buffer-file-coding-system 'utf-8)

 #+END_SRC

*** Time

 Display the time!

 #+BEGIN_SRC emacs-lisp
 (setq
  ;; update every 15 seconds instead of 60 seconds
  display-time-interval 15)
 (display-time-mode 1)
 #+END_SRC

*** End sentence with a single space

I'd like to end sentence with a single space.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

*** Mode Line

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line)
#+END_SRC

*** Help with guide key

#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :defer t
    :diminish guide-key-mode
    :config
    (progn
    (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
    (guide-key-mode 1)))  ; Enable guide-key-mode
#+END_SRC

*** Unfill Paragraph
#+BEGIN_SRC emacs-lisp
    (defun my/unfill-paragraph (&optional region)
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive (progn
                     (barf-if-buffer-read-only)
                     (list t)))
      (let ((fill-column (point-max)))
        (fill-paragraph nil region)))
  (bind-key "M-Q" 'my/unfill-paragraph)
#+END_SRC

*** Tab complete

 #+BEGIN_SRC emacs-lisp
 (setq tab-always-indent 'complete)
 (add-to-list 'completion-styles 'initials t)
 #+END_SRC
*** Spell checking

 #+BEGIN_SRC emacs-lisp
   ;; Mostly taken from
   ;; http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
   (setq ispell-program-name "hunspell")
   (setq ispell-local-dictionary "en_US")
   (setq ispell-local-dictionary-alist
	 ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters
	 ;; passed to hunspell You could use `("-d" "en_US,en_US-med")`
	 ;; to check with multiple dictionaries
	 '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
   (setq ispell-extra-args
	   (list "--sug-mode=fast" ;; ultra|fast|normal|bad-spellers
		 "--lang=en_US"
		 "--ignore=4"))
    ;; check spells in text documents
   (dolist (hook '(text-mode-hook
		     org-mode-hook
		     markdown-mode-hook))
   (add-hook hook (lambda () (flyspell-mode 1))))


   (dolist (mode '(emacs-lisp-mode-hook))
		     ;;python-mode-hook))
       (add-hook mode
		 '(lambda ()
		    (flyspell-prog-mode))))
 #+END_SRC

*** Line Number
 I wanna know the line number and column

 #+BEGIN_SRC emacs-lisp

 (line-number-mode 1)
 (column-number-mode 1)

 #+END_SRC

*** Delete Highlighted Region
 When I selected region and start typing, jsut delete that region

 #+BEGIN_SRC emacs-lisp
 (delete-selection-mode 1)
 #+END_SRC

*** Ignore case when using completion for file names

 #+BEGIN_SRC emacs-lisp
 (setq read-file-name-completion-ignore-case t)
 #+END_SRC

*** Hide the mouse while typing

 #+BEGIN_SRC emacs-lisp
 (setq make-pointer-invisible t)
 #+END_SRC

*** Fill Column Width

 #+BEGIN_SRC emacs-lisp
 (setq-default fill-column 80)
 (setq-default default-tab-width 2)
 (setq-default indent-tabs-mode nil)
 #+END_SRC

*** White-space mode

 Here are the things that whitespace-mode should highlight

 #+BEGIN_SRC emacs-lisp
 (setq whitespace-style '(tabs newline space-mark
                          tab-mark newline-mark
                          face lines-tail))
 #+END_SRC

 Display pretty things for newlines and tabs (nothing for spaces)

 #+BEGIN_SRC emacs-lisp
 (setq whitespace-display-mappings
       ;; all numbers are Unicode codepoint in decimal. e.g. (insert-char 182 1)
       ;; 32 SPACE, 183 MIDDLE DOT
       '((space-mark nil)
         ;; 10 LINE FEED
         ;;(newline-mark 10 [172 10])
         (newline-mark nil)
         ;; 9 TAB, MIDDLE DOT
         (tab-mark 9 [183 9] [92 9])))
 #+END_SRC

 Always turn on whitespace mode in programming buffers

 #+BEGIN_SRC emacs-lisp
 ;; turn on whitespace mode globally in prog-mode buffers
 ;; (add-hook 'prog-mode-hook #'whitespace-mode)
 (add-hook 'whitespace-mode-hook (lambda () (diminish 'whitespace-mode)))
 #+END_SRC

 Indicate trailing empty lines in the GUI:

 #+BEGIN_SRC emacs-lisp
 (setq-default show-trailing-whitespace t)
 #+END_SRC

** Set up $PATH and other vars

On OSX Emacs needs help setting up system paths

#+BEGIN_SRC emacs-lisp
;; on OSX Emacs needs help setting up the system paths
(when (memq window-system '(mac ns))
  (require 'exec-path-from-shell)
  ;; From https://github.com/aculich/.emacs.d/blob/master/init.el
  ;; Import additional environment variables beyond just $PATH
  (dolist (var '("PYTHONPATH"         ; Python modules
                 "INFOPATH"           ; Info directories
                 "JAVA_OPTS"          ; Options for java processes
                 "SBT_OPTS"           ; Options for SBT
                 "RUST_SRC_PATH"      ; Rust sources, for racer
                 "CARGO_HOME"         ; Cargo home, for racer
                 "EMAIL"              ; My personal email
                 "GPG_TTY"
                 "GPG_AGENT_INFO"
                 "SSH_AUTH_SOCK"
                 "SSH_AGENT_PID"
                 ))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize))

#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
;; Standard key bindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

* Languages Specific Configuration

** Shell

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.sh$" . shell-script-mode))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  ; enable elpy
  (elpy-enable)

  ; where to look for environments
  (setenv "WORKON_HOME" "/home/yizhe/.conda/envs")
  (pyvenv-mode 1)

  ;; ipython interpreter

  (setq python-shell-interpreter "jupyter"
        python-shell-interpreter-args "console --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'python-shell-completion-native-disabled-interpreters
               "jupyter")

  ;; syntax check on the fly
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))



#+END_SRC


** Git


#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-x g") 'magit-status)


#+END_SRC
